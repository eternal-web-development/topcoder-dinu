powerStep 1
Welcome to the CSS Variables Skyline project! Start by adding the ! DOCTYPE
html declaration at the top of the document so the browser knows what
type of document it's reading.

Step 2
Add opening and closing html tags below the DOCTYPE so you have a place
to start putting some code. Be sure to set the language to English.

Step 3
Next, add opening and closing head and body tags within the html
element.

Step 4
Within the head , nest a meta element with a charset of UTF-8,a title
element with a title of City Skyline, and a I tnk element that links your
styles . css file.

Step 5
In CSS, you can target everything with an asterisk. Add a border to
everything by using the * selector, and giving it a border of Ipx sol td
black. This is a trick that helps visualize where elements are and their size.
You will remove this later.

Step 6
Also add a box-stz tng of border-box to everything. This will make it so
the border you added doesn't add any size to your elements.

Step 7
You can see the body (it's the inner-most box on your page); the box around
it is the html element. Make your body fill the whole viewport by giving it a
hetght of løøvh. Remove the default margtn from the body by setting the
margin to o. Finally, set the overflow property to htdden to hide any scroll
bars that appear when something extends past the viewport.


Step 8
Create a dtv element in the body with a class of background-buildings .
This will be a container for a group of buildings.

Step 9
Give your .background-butldtngs element a width and height of 100%
to make it the full width and height of its parent, the body.

Step 10
Nest a div with a class of bbl in the background buildings container. Open
your styles.css file, and give .bbl a width of and height of 70%.
"bb' stands for "background building", this will be your first building.

Step 11
Nest four dtv elements in the . bbl container Give them the classes bbla,
bblb, bblc, and bbld in that order This building will have four sections.

Step 12
Give the parts of your building width and hetght properties with these values:
708 and to .bbla, and 108 to .bblb, and to .bblc, and
100% and to . bbld Remember that these percentages are relative to the
parent and note that the heights will add up to 100% - vertically filling the
container.

Step 13
Center the parts of your building by turning the . bbl element into a flexbox
parent. Use the flex-direct ton and altgn-ttems properties to center the
children.

Step 14
Now you have something that is resembling a building, You are ready to create
your first variable, Variable declarations begin with two dashes (-) and are
given a name and a value like this: --vartable-name: value; . In the rule for
the bbl class, create a variable named --building-colorl and give it a value
Of #999

Step 15
To use a variable, put the variable name in parentheses with var in front of
them like this: var( --vartable-name) . Whatever value you gave the variable
will be applied to whatever property you use it om
Add the variable --butldtng-colorl you created in the previous step as the
value of the background-color property of the .bbla class.

step 16
Use the same variable as the background-color of the .bblb, .bblc, and
. bbld classes to fill in the rest of the building.

Step 17
Change the value of your variable from #999 to #aa80ff and you can see how
it gets applied everywhere you used the variable. This is the main advantage of
using variables, being able to quickly change many values in your stylesheet by
just changing the value of a variable.

step 18 e
Your first building looks pretty good now. Nest three new dtv elements in the
. background-buildings container and give them the classes of bb2, bb3,
and bb4 in that order. These will be three more buildings for the background.

Step 19
Give the new buildings width and height properties of: and for .bb2,
and for .bb3, and 11% and 58% for .bb4. You will be using almost all
percent based units and some flexbox for this project, so everything will be
completely responsive.

step 20
The buildings are currently stacked on top of each other. Align the buildings by
turning the . background-buildings element into a flexbox parent. Use the
al tgn-ttems and justify-content properties to evenly space the buildings
across the bottom of the element.

Step 21
The buildings are too spaced out. Squeeze them together by adding two empty
div elements to the top of the . background-buildings element, two more at
the bottom of it, and one more in between . bb3 and . bb4. These will be added
as evenly-spaced elements across the container, effectively moving the
buildings closer to the center.

step 22
Create a new variable below your --butldtng-colorl variable. Name your new
variable --butldtng-color2 and give it a value of #66cc99. Then set it as the
background-color of .bb2.

step 23
That didn't work. You should add a fallback value to a variable by putting it as
the second value of where you use the variable like this: var( --vartable-
name, fallback-value) . The property will use the fallback value when there's
a problem with the variable. Add a fallback value of green to the background-
color of .bb2.

step 24
Create a new variable below the other ones named --buttdtng-color3 and
give ita value of #cc6699. Then use it as the background-color of the .bb3
class and give it a fallback value of pink.

step 25
That didn't work, because the variables you declared in . bbl do not cascade to
the . bb2 and .bb3 sibling elements. That's just how CSS works. Because of
this, variables are often declared in the : root selector. This is the highest level
selector in CSS; putting your variables there will make them usable everywhere.
Add the : root selector to the top of your stylesheet, and move all your variable
declarations there.

step 26
Now that you've worked the bugs out and the buildings are the right colors, you
can remove the fallback values in the two places they were used. Go ahead and
do that now.

step 27
Create another variable named --butIdtng-color4 and give it a value of
#538cc6. Make sure its in the : root selector this time. Then use it to fill in the
last building.

Step 28
The background buildings are starting to look pretty good. Create a new dtv
below the . background-buildings element and give it a class of
foreground-buildings. This will be another container for more buildings.

step 29
You want the . foreground-buildings container to sit directly on top of the
. background-buildings element. Give it a width and height of 100%, set
the position to absolute, and the top to o. This will make it the same size
as the body and move the start of it to the top left corner.

step 30
Nest six div elements within . foreground-butldtngs and give them the
classes of fbl through fb6 in that order. "fb" stands for "foreground building".
These will be six more buildings for the foreground.

Step 31
Give the six new elements these width and height values: and to
. fbl, and to .fb2, and to .fb3, and to .fb4,
and 3396 to . fb5, and and to . fb6.

step 32
Add the same display, align-items, and justify-content properties and
values to . foreground-buildings that you used on . background-
buildings. Again, this will use Flexbox to evenly space the buildings across
the bottom of their container.

step 33
You should optimize your code. Move the posttton and top properties and
values from . foreground-buildings to . background-buildings. Then
select both . background-buildings and . foreground-buildings there,
effectively applying those styles to both of the elements. You can use a
comma ( , ) to separate selectors like this: selectorl, selector2.

Step 34
Now that you did that, you can delete the old . foreground-butldtngs
declaration and all of its properties since they aren't needed anymore.

step 35
The skyline is coming togethec Fill in the background-color property of the
foreground buildings. Use your --butldtng-colorl variable to fill in .fb3
and . fb4, --buildtng-color2 for .fb5, --butldtng-color3 for . fb2 and
. fb6, and --buildtng-color4 for .fbl.

step 36
Squeeze the buildings together again by adding two empty div elements
within both the top and bottom of the . foreground-buildings element, and
one more in between .fb2 and .fb3.

step 37
Move the position of .fb4 relative to where it is now by adding a posit ton of
relattve and left of to it. Do the same for . fb5 but use rtght
instead of left. This will cover up the remaining white space in between the
buildings.

step 38
Your code is starting to get quite long. Add a comment above the . fbl class
that says FOREGROUND BUILDINGS -
"fb" stands for "foreground
building" to help people understand your code. Above the . bbl class add
another comment that says BACKGROUND BUILDINGS -
"bb" stands for
"background building" . If you don't remember, comments in CSS look like
this: /* Coment here

Step 39
Create a new variable in : root called --wtndow-colorl and give ita value of
black. This will be a secondary color for the purple buildings.

Step 40
Gradients in CSS are a way to transition between colors across the distance
of an element. They are applied to the background property and the syntax
looks like this:
	gradient-type (
		colorl,
		color2
	);

In the example, colorl is solid at the top, color2 is solid at the bottom, and
in between it transitions evenly from one to the next. In . bbla, add a gradient
of type ltnear-gradtent to the background property with --butldtng-
colorl as the first color and --wtndow-colorl as the second.

Step 41
You want to add the same gradient to the next two sections. Instead of doing
that, create a new class selector called bbl-wtndow, and move the height
and background properties and values from .bbla to the new class selector.

step 42 
Add the new bbl-wtndow class to the . bb1a, bb1b and bb1c elements. This
will apply the gradient to them.

Step 43
You don't need the height or background-color properties in . bbla, . bblb
or . bblc anymore, so go ahead and remove them.

Step 44
Gradients can use as many colors as you want like this:
	gradient-type(
		colorl,
		color2,
		color3
	);
Add a linear-gradient to .bbld with orange as the first color,
building-colorl as the second, and --wtndow-colorl as the third.
Remember to use the gradient on the background property.

Step 45
Its a little hidden behind the foreground buildings, but you can see the three
color gradient there. Since you are using that now, remove the background-
color property from .bbld.

Step 46
You can specify where you want a gradient transition to complete by adding it
to the color like this:
	gradient-type(
		colorl,
		color2 20%,
		color3
	);
Here, it will transition from colorl to color2 between and 20% of the
element and then transition to color3 for the rest. Add to the -
buildtng-colorl color of the . bbld gradient so you can see it in action.

step 47
Remove orange from the .bbld gradient and change the to 50%. This
will make --butldtng-colorl solid for the top half, and then transition to -
window-colorl for the bottom half.

Step 48
Nest two new div elements within . bb2, give them the classes of bb2a and
bb2b, in that order. These will be two sections for this building.

Step 49
Give .bb2b a width and height of 100% to make it fill the building container.
You will add something on the top a little later.

Step 51
Gradient transitions often gradually change from one color to another. You
can make the change a solid line like this:
	linear-gradient(
		var(--first-color) 0%
		var(--first-color) 40%,
		var(-- second-color) 40%,
		var(--second-color) 80%
	);
Add a linear-gradient to . bb2b that uses --building-color2 from 0% to
6% and --window-color2 from 6% to 9%.

step 52
You can see the hard color change at the top of the section. Change the
gradient type from ltnear-gradtent to repeattng-ltnear-gradtent for
this section. This will make the four colors of your gradient repeat until it gets
to the bottom of the element; giving you some stripes, and saving you from
having to add a bunch of elements to create them.

step 53
In the next few steps, you are going to use some tricks with CSS borders to
turn the .bb2a section into a triangle at the top of the building. First, remove
the background-color from .bb2 since you don't need it anymore.

Step 54
Add these properties to .bb2a:
margin:auto;
width:5vw;
height:5vw;
border-top: Ivw solid #000;
border-bottom: lvw solid #øøø;
border-right:lvw solid #999;
border-left: lvw solid #999;

After you add these, you can see how a thick border on an element gives you
some angles where two sides meet. You are going to use that bottom border
as the top of the building.

step 55
Next, remove the wtdth and height from .bb2a, and change the border-
left and border-right to use 5vw instead of lvw. The element will now
have zero size and the borders will come together in the middle.

Step 56
Next, change the two #999 of .bb2a to transparent. This will make the left
and right borders invisible.

step 57
Remove the margin and border-top properties and values from .bb2a to
turn it into a triangle for the top of the building.

step 58
Finally, on the border-bottom property of .bb2a, change the lvw to 5vh and
change the #000 color to your --butldtng-color2 variable. There you go,
now it looks good! At any time throughout this project, you can comment out
or remove the border property you added to everything at the beginning to
see what the buildings will look like when that gets removed at the end.

step 59
On to the next building! Create a new variable called --wtndow-color3 in
: root and give it a value of #d98cb3. This will be the secondary color for the
pink buildings.

Step 60
So far, all the gradients you created have gone from top to bottom, that's the
default direction. You can specify another direction by adding it before your
colors like this:
	gradient-type(
		direction,
		colorl,
		color2
	);
Fill in .bb3 with a repeating-linear-gradient . Use 90deg for the
direction, your build tng-color3 for the first two colors, and window-color3
at 15% for the third. When you don't specify a distance for a color, it will use
the values that makes sense. In this case, the first two colors will default to
and 7 .5% because it starts at and 7.5% is half of the 15%.

step 61
Remove the background-color property and value from .bb3 since you are
using the gradient as the background now.

step 62
The next building will have three sections. Nest three div elements within
. bb4. Give them the classes of bb4a, bb4b and bb4c in that order.

step 63
Give the new div elements these width and height values: 3% and to
. bb4a, and 5% to .bb4b, and 100% and 85% to .bb4c.

Step 64
Remove the background-color property and value from . bb4, and add it to
the three new sections . bb4a, . bb4b, and . bb4c , so only the sections are
filled.

step 65
You want .bb4 to share the properties of . bbl that center the sections.
Instead of duplicating that code, create a new class above the background
building comment called building-wrap. Leave it empty for now; this class
will be used in a few places to save you some coding.

Step 66
Move the display, flex-direct ton, and align-items properties and
values from . bbl to the new building-wrap class.

step 67
Add the new building-wrap class to the .bbl and . bb4 elements. This will
apply the centering properties to the buildings that need it.

step 68
Create a new variable called --wtndow-color4 in : root and give ita value of
#8cb3d9. This will be the secondary color for the last background building.

Step 69
Nest four new div elements within .bb4c, give them all the class of bb4-
window. These will be windows for this building.

step 70
Give the bb4-wtndow class a width of 18%, a height of 90%, and add your -
-window-color4 variable as the background-color.

Step 71
The windows are stacked on top of each other at the left of the section,
behind the purple building. Add a new class below . building-wrap called
window-wrap. Make . window-wrap a flexbox container, and use the align-
items and justify-content properties to center its child elements vertically
and evenly space them in their parent, respectively.

step 72
Add the new window-wrap class to the .bb4c element.

step 73
Looks good! On to the foreground buildings! Turn the . fbl building into three
sections by nesting three new dtv elements within it. Give them the classes of
fbla, fblb and fblc, in that order.

Step 74
Give . fblb a width of 60% and height of 10%, and . fblc a width of 100%
and hetght of 80%.

Step 75
Add the building-wrap class to the . fbl element to center the sections.

step 77
Don't worry about the space at the bottom, everything will get moved down
later when you add some height to the element at the top of the building.
Add a repeating-linear-gradtent to .fblc with a 90deg angle, your -
butldtng-color4 from to and transparent from to 15%.

step 78
You can add multiple gradients to an element by separating them with a
comma ( , ) like this:
	gradientl(colors) , gradient2(colors);
Add a repeating-I tnear-gradtent to .fblc below the one that's there; use
your --butldtng-color4 from to and --wtndow-color4 from
and 90%. This will fill in behind the gradient you added last.

step 79
You're going to use some more border tricks for the top section. Add a
border-bottom with a value of 7vh solid var( --butldtng-color4) to
. fbla. This will put a 7vh height border on the bottom. But since the element
has zero size, it only shows up as a 2px wide line from the 1 px border that is
on all the elements.

step 80
When you increase the size of the left and right borders, the border on the
bottom will expand to be the width of the combined left and right border
widths. Add 2vw solid transparent as the value of the border-left and
border-right properties of . fbla. They will be invisible, but it will make the
border on the bottom 4vw wide.

Step 81
On to the next building! Nest two div elements within . fb2 and give them
classes of fb2a and fb2b, in that order.

step 82
Give . fb2a a width of 100% and . fb2b a width of 100% and hetght of
75%.

Step 83
Nest three div elements within . fb2b and give them a class of fb2-wtndow.
These will be windows for this section of the building.

Step 84
Add your wtndow-wrap class to . fb2b to position the new window elements.

step 85
Give the . fb2-wtndow elements a width of 22%, height of 100%, and a
background-color of your --wtndow-color3 variable.

Step 86
Move the background-color property and value from . fb2 to . fb2b to just
color the section and not the container.

step 87
For .fb2a, add a border-bottom of 10vh solid var(--butldtng-cotor3),
and a border-left and border-right of lvw solid transparent. This
time the border trick will create a trapezoid shape.

Step 88
For the next building, nest four div elements within . fb3 with classes of fb3a,
fb3b, fb3a again, and fb3b again, in that order. This building will have four
sections, and the top two will be almost the same as the bottom two.

Step 89
Give the .fb3a element a width of and hetght of 15%. Then give the
. fb3b element a wtdth of 100% and height of 35%.

Step 90
Remove the background-color property and value from . fb3, and add them
to .fb3a and .fb3b.

Step 91
Add your building-wrap class to the .fb3 element to center the sections.

step 92
Nest three new div elements in the first . fb3a element. Give them each a
class of fb3-wtndow. These will be windows for this section.

step 93
Give the . fb3-wtndow elements a width of 25%, a height of 80%, and use
your --wtndow-colorl variable as the background-color value.

Step 94
Add your window-wrap class to the . fb3a element to center and space the
windows.

Step 95
With CSS variables you can change values without searching everywhere in
the stylesheet. Change the --wtndow-colorl value to #bb99ff.

Step 96
Only three more buildings to go. Nest two new div elements within the . fb4
element and give them the classes of fb4a and fb4b, in that order. Remember
that you sort of flipped the location of .fb4 and . fb5, so it's the rightmost
purple building you are working on now.

step 97
Give .fb4b a width of 100% and height of 89%.

Step 98
Add your --butldtng-colorl variable as value of the background-color
property of . fb4b. Then, remove the background-color from . fb4.

Step 99
Nest six div elements within .fb4b and give them all a class of fb4-window.

step løø
Give the .fb4-wtndow elements a width of 30%, hetght of 10%, and
border-radtus of 50%. These will make some circular windows for this
building.

step 101
Fill in the windows with your secondary color for this building. Also add a
margin of to give the windows some space.

step 102
The windows are stacked on top of each other on the rightmost purple
building. Turn the building into a flexbox parent, and use the flex-wrap
property to put the windows side by side, and push them down to a new row
when they don't fit.

step 103
This building is going to have another triangle on top. Give the top section a
border-top of 5vh solid transparent, and a border-left that is 8vw,
sol td , and uses your building color variable as the color.

Step 104
On to the next building! It's the green one in the foreground. Give it a
repeating-linear-gradient with your building color from to 5%, and
transparent from 5% to 10%.

Step 105
Add another repeating-linear-grad tent below the one you just added.
Give ita 90deg direction, use your building color from to 12% and window
color 12% to 44%. This will make a bunch of rectangle windows.

step 106
You don't need the background-color for this building anymore so you can
remove that property.

Step 107
Finally! You made it to the last building! Add a repeating gradient to it with a
90deg direction. Use the building color from 0% to and transparent
from to 30%.

step 108
Add another repeating gradient to this building; make it the same as the one
you just added, except don't add the 90deg direction and use your window
color instead of the two transparent colors.

step 109
You can remove the background-color for this building now, since it isn't
needed.

Step 110
Okay, the buildings are done. Go back to the * selector and remove the
border you applied to everything at the beginning and the buildings will come
together.

Step 111
Add sky as a second class to the . background-butldtngs element. You are
going to make a background for the skyline.

step 112
Give the sky class a radial-gradient. Use #ffcf33 from to 20%,
#ffff66 at 21%, and #bbeeff at 100%. This will add circular gradient to the
background that will be your sun.

Step 113
At the top of the sky gradient color list, where you would put a direction for the
gradient; add circle closest-corner at 15% 15%, . This will move the
start of the gradient to 15% from the top and left. It will make it end at the
closest-corner and it will maintain a circle shape. These are some
keywords built into gradients to describe how it behaves.

Step 114
A media query can be used to change styles based on certain conditions, and
they look like this:
	@media (condition) {	}

Add an empty media query at the bottom of your stylesheet with a condition
of max-wtdth: løøøpx. Styles added in here will take effect when the
document size is 1 OOOpx wide or less.

Step 115
Copy and paste your whole sky class along with all of its properties
 and values into the media query. You are going to make another color scheme
 for the skyline that changes it from day to night.

Note: You are going to need to scroll past the editable region to copy the class.

Step 116
In the sky class of the media query, change the two #ffcf33 color values to #ccc, 
the #ffff66 to #445, and the #bbeeff to #223. 
Then you can resize your window to see the background change colors.

Step 117
Add a :root selector to the top of your media query. 
Then redefine all four of the --building-color variables to use the value #000 there.

Step 118
Lastly, in the :root selector of the media query, redefine all four of the --window-color variables
to use #777. When you're done, resize the window and watch it go from day to night.

Variables are primarily used with colors, and that's how you used them here.
But they can be given any value and used on any property. Your project looks great!